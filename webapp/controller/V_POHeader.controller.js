sap.ui.define([
	"POReportForSCM/controller/BaseController",
	"sap/ui/model/json/JSONModel",
	"sap/ui/model/Filter",
	"sap/ui/model/FilterOperator",
	"sap/ui/model/FilterType",
	"sap/m/MessageBox",
	"sap/m/MessageToast",
	"sap/m/ViewSettingsDialog",
	"sap/m/ViewSettingsItem",
	"sap/ui/model/Sorter"
], function(BaseController, JSONModel, Filter, FilterOperator, FilterType, MessageBox, MessageToast, ViewSettingsDialog, ViewSettingsItem,
	Sorter) {
	"use strict";

	return BaseController.extend("POReportForSCM.controller.V_POHeader", {

		onInit: function() {
			debugger;
			var dataModel = new JSONModel(),
				oModel = this.getOwnerComponent().getModel(),
				oTable = this.getView().byId("poHeaderTableId"),
				oFilters = [],
				oNumber = "",
				that = this;
			// oModel.addBatchChangeOperations(batchChanges);
			oModel.setUseBatch(false);
			this._sorterDialog = null;
			this._sortField = null;
			this._sortDescending = false;
			this._validSortFields = ["Ebeln", "Bukrs"];
			this._initViewSettingsDialog();
			this.getView().setModel(dataModel, "dataModel");

			oModel.read("/POHeaderSet", {

				filters: oFilters,
				method: "GET",
				success: function(data) {
					for (var i = 0; i < data.results.length; i++) {
						oNumber = data.results[i].Bukrs;
						data.results[i].Bukrs = that._pad(oNumber, 4);
						oNumber = data.results[i].Ebeln;
						data.results[i].Ebeln = that._pad(oNumber, 10);
					}
					dataModel.setData(data);
					oTable.setBusy(false);
				},
				error: function(oError) {
					oTable.setBusy(false);
					MessageToast.show("Failed to fetch purchase orders");
				}

			});

		},

		onSortButtonPressed: function(oEvent) {
			this._sorterDialog.open();
		},

		_initViewSettingsDialog: function() {
			this._sorterDialog = new ViewSettingsDialog("vsd", {
				confirm: function(oEvent) {
					var oSortItem = oEvent.getParameter("sortItem");
					this._applySorter(oSortItem.getKey(), oEvent.getParameter("sortDescending"));
				}.bind(this)
			});

			// init sorting (with simple sorters as custom data for all fields)
			this._sorterDialog.addSortItem(new ViewSettingsItem({
				key: "Ebeln",
				text: "Document No.",
				selected: true // by default the MockData is sorted by EmployeeID
			}));

			this._sorterDialog.addSortItem(new ViewSettingsItem({
				key: "Bukrs",
				text: "Company code",
				selected: false
			}));

		},

		_applySorter: function(sSortField, sortDescending) {
			var bSortDescending, oBinding, oSorter;

			// only continue if we have a valid sort field
			if (sSortField && this._validSortFields.indexOf(sSortField) > -1) {

				// convert  the sort order to a boolean value
				if (typeof sortDescending === "string") {
					bSortDescending = sortDescending === "true";
				} else if (typeof sortDescending === "boolean") {
					bSortDescending = sortDescending;
				} else {
					bSortDescending = false;
				}

				// sort only if the sorter has changed
				if (this._sortField && this._sortField === sSortField && this._sortDescending === bSortDescending) {
					return;
				}

				this._sortField = sSortField;
				this._sortDescending = bSortDescending;
				oSorter = new Sorter(sSortField, bSortDescending);

				// sync with View Settings Dialog
				this._syncViewSettingsDialogSorter(sSortField, bSortDescending);
				var oTable = this.getView().byId("poHeaderTableId");
				// var oNumber = "";
				// var dataModel = this.getView().getModel("dataModel");
				// var results = dataModel.getProperty("/results");
				// for (var i = 0; i < results.length; i++) {
				// 	oNumber = results[i].Bukrs;
				// 	results[i].Bukrs = this._pad(oNumber, 4);
				// }
				// for(var i = 0; i<oTable.mAggregations.items.length; i++){
				// 	oNumber = oTable.mAggregations.items[i].mAggregations.cells[1].mProperties.text;
				// 	oTable.mAggregations.items[i].mAggregations.cells[1].mProperties.text = this._pad(oNumber,4);
				// } 
				// this.getView().setModel(dataModel);
				oBinding = oTable.getBinding("items");
				oBinding.sort(oSorter);
			}
		},

		_syncViewSettingsDialogSorter: function(sSortField, bSortDescending) {
			// the possible keys are: "EmployeeID" | "FirstName" | "LastName"
			// Note: no input validation is implemented here
			this._sorterDialog.setSelectedSortItem(sSortField);
			this._sorterDialog.setSortDescending(bSortDescending);
		},

		onFindPress: function(oEvent) {
			// debugger;
			var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
			oRouter.navTo("Route_FindItem", {});
		},

		navigateToRoute: function(routeName) {
			debugger;
			//This code was generated by the layout editor.
			var oModel = this.getOwnerComponent().getModel(),
				oTable = this.getView().byId("poHeaderTableId"),
				oItem = oTable.getSelectedItem(),
				oRouter = sap.ui.core.UIComponent.getRouterFor(this);

			if (!oItem) {
				MessageBox.error("Please select one of these purchase order");
				return;
			}
			var selectPO = oItem.mAggregations.cells[0].mProperties.text;
			if (routeName === "Route_ChangePO1") {
				oModel.callFunction("/GetReleaseStatus", {
					// filters: oFilters,
					urlParameters: {
						Ebeln: selectPO
					},
					method: "GET",
					success: function(data) {
						if (data.Status === "CREATED") {
							oRouter.navTo(routeName, {
								selectedPO: selectPO
							});
						} else {
							MessageBox.error("Purchase order No. " + selectPO + "has been released!");
						}
					},
					error: function(oError) {
						MessageToast.show("Can't get Status of purchase order");
					}

				});
			} else {

				oRouter.navTo(routeName, {
					selectedPO: selectPO
				});
			}

		},

		GoToDetails: function(oEvent) {
			debugger;
			//This code was generated by the layout editor.
			// var selectPO = oEvent.getSource().getBindingContext().getProperty("Ebeln");
			// var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
			// oRouter.navTo("Route_PODetail", {
			// 	SelectedItem: selectPO
			// });
			this.navigateToRoute("Route_DisplayPO");
		},

		ChangePO: function(oEvent) {
			debugger;
			this.navigateToRoute("Route_ChangePO1");
		},

		CreatePO: function(oEvent) {

			var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
			oRouter.navTo("Route_CreatePO1", {});
		},

		onFilterPressed: function(oEvent) {
			debugger;
			var oTable = this.getView().byId("poHeaderTableId"),
				docNo = this.byId("docNoId").getValue(),
				companyCode = this.byId("companyCodeId").getValue(),
				createdBy = this.byId("createdById").getValue(),
				docType = this.byId("docTypeId").getValue(),
				oFilters = [];

			if (docNo) {
				oFilters.push(new Filter("Ebeln", FilterOperator.Contains, docNo));
			}

			if (companyCode) {
				oFilters.push(new Filter("Bukrs", FilterOperator.Contains, companyCode));
			}

			if (createdBy) {
				oFilters.push(new Filter("Ernam", FilterOperator.Contains, createdBy));
			}

			if (docType) {
				oFilters.push(new Filter("Bsart", FilterOperator.Contains, docType));
			}

			var oModel = this.getOwnerComponent().getModel();
			var dataModel = this.getView().getModel("dataModel");

			oTable.setBusy(true);

			oModel.read("/POHeaderSet", {
				filters: oFilters,
				method: "GET",
				success: function(data) {
					dataModel.setData(data);
					oTable.setBusy(false);
				},
				error: function() {
					oTable.setBusy(false);
				}
			});
		},

		_pad: function(num, size) {
			var s = num + "";
			while (s.length < size) s = "0" + s;
			return s;
		},
		// onFilterPO: function(oEvent) {

		// 	// build filter array
		// 	var aFilter = [];
		// 	var sQuery = oEvent.getSource().getValue();
		// 	var aFilter = new Filter(
		// 		"Bsart",
		// 		FilterOperator.Contains,
		// 		sQuery
		// 	);

		// 	// if (sQuery) {
		// 	// 	aFilter.push(new Filter("Bsart", FilterOperator.Contains, sQuery));
		// 	// }
		// 	debugger;
		// 	// filter binding
		// 	var oBinding = this.getView().byId("POList").getBinding("items");
		// 	// var oBinding = oList;
		// 	oBinding.filter(aFilter, FilterType.Application);
		// }

	});

});